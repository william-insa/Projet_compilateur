/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)
package generated;
import utility.*;

public class Yaka {

	public static Declaration declaration;
	public static TabIdent tabIdent;
	public static Expression expression;
	public static YVM yvm;
	
	public static int dernierType;
	public static int nbFaire;
	public static int lastFaire;
	
	public static int nbSi;
	public static int lastSi;
	
	public Yaka ()	{		declaration = new Declaration();
    	tabIdent = new TabIdent();
    	nbFaire=1;
    	nbSi=1;
	}
	
  public static void main(String args[]) {
    
    Yaka analyseur;
    analyseur = new Yaka();
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME>    <ident>	
   {yvm = new YVMasm(YakaTokenManager.identLu);
    expression = new Expression(yvm);
     yvm.entete();}
   bloc()
   <FPROGRAMME>   {yvm.queue();}
}

void bloc() : {}{
 (declConst())*
 (declVar())*
 {yvm.ouvrePrinc(tabIdent.getNbVar());}		
  suiteInstr()
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
  <ident>  {declaration.declConst(YakaTokenManager.identLu);}  	
   "=" valConst()
}

void valConst() : {String clef = YakaTokenManager.identLu;}
{
  <entier> 		{declaration.defConst(clef,0, YakaTokenManager.entierLu);}
 | <ident>	  	{declaration.defConst(clef, YakaTokenManager.identLu);} 	
 | <VRAI> 		{declaration.defConst(clef, 1, -1);}
 | <FAUX> 		{declaration.defConst(clef, 1, 0);}
}


void declVar() : {}
{
  <VAR> type(){int type = 0; if (dernierType == 1)  				{type = 1;}}
  <ident>		{declaration.declVar(YakaTokenManager.identLu, type);}
  ("," 
      <ident>  {declaration.declVar(YakaTokenManager.identLu, type);}
  )* ";"
	
}

void type() :{}
{
   <ENTIER>  {dernierType = 0;}
 | <BOOLEEN>	{dernierType = 1;}
}
/*
 * Syntaxe des instructions.
 */
void suiteInstr() : {}
{ (instruction() (";" (instruction() )?  )* )? }

void instruction() : {}
{
	affectation() | lecture() | ecriture() | iteration() | conditionnelle()
}

void affectation() : {IdVar temp;}
{
	<ident> {temp=(IdVar) Yaka.tabIdent.chercheIdent(YakaTokenManager.identLu);} "="  expression() {expression.aff(temp); yvm.istore(temp.getOffset());}
}

void lecture() : {}
{
	<LIRE> "(" <ident> ")"  {yvm.lireEnt(((IdVar) Yaka.tabIdent.chercheIdent(YakaTokenManager.identLu)).getOffset());}
}

void ecriture() : {}
{
	<ECRIRE> "(" ( expression() {if(expression.ecr()==0) yvm.ecrireEnt(); else if(expression.ecr()==1) yvm.ecrireBool();} | <chaine> {yvm.ecrireChaine(YakaTokenManager.chaineLue);} ) ")"
	| <ALALIGNE> {yvm.aLaLigne();}
}

/*
 * Itération
 */
void iteration() : {int temp=nbFaire;}
{
	<TANTQUE> {yvm.etiquette("FAIRE"+temp);lastFaire=nbFaire;nbFaire++;}  expression() {expression.cond(); yvm.iffaux("FAIT"+temp);} <FAIRE> instruction() 
	| <FAIT> {yvm.Goto("FAIRE"+lastFaire); yvm.etiquette("FAIT"+lastFaire);lastFaire--;}

}

/*
 * Conditionnelle
 */
void conditionnelle() : {int temp=nbSi;}
{
	<SI> {lastSi=nbSi;nbSi++;} expression() {expression.cond(); yvm.iffaux("SINON"+temp);} <ALORS> instruction() {yvm.etiquette("SINON"+temp);yvm.Goto("FSI"+temp);}
	| <FSI> {yvm.etiquette("FSI"+lastSi);lastSi--;}
}


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() {expression.evaluation();} 
  )?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme() {expression.evaluation();}
   )*  
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur() {expression.evaluation();}
  )*
}
void facteur() : {}
{   primaire()
  |  opNeg() primaire() {expression.evaluationNeg();}
}

void primaire (): {}
{
   valeur() 
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 		{yvm.iconst(YakaTokenManager.entierLu); expression.empilerInt();}
 | <ident> 		{expression.empilerIdent(YakaTokenManager.identLu);}
 | <VRAI> 		{yvm.iconst(-1); expression.empilerBool();}
 | <FAUX> 		{yvm.iconst(0); expression.empilerBool();}
 
}

void opRel() : {}
{
   "=" {expression.empilerOP("=");}
 | "<>" 	{expression.empilerOP("<>");}
 | "<" 		{expression.empilerOP("<");}
 | "<=" 	{expression.empilerOP("<=");}
 | ">" 		{expression.empilerOP(">");}
 | ">=" 	{expression.empilerOP(">=");}
} 

void opAdd() : {}
{
    "+"		{expression.empilerOP("+");}
  |  "-"  {expression.empilerOP("-");}
  | <OU> 	{expression.empilerOP("OU");}
}

void opMul() : {}
{
  "*"		{expression.empilerOP("*");}
  | "/"		{expression.empilerOP("/");}
  | <ET>	{expression.empilerOP("ET");}
} 

void opNeg() : {}
{ "-" 		{expression.empilerOP("NEG");}
 | <NON>	{expression.empilerOP("NON");}
}


